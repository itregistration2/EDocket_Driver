/// <reference types="react" />
declare const AnimatedScreen: {
    Header: import("react").NamedExoticComponent<{
        boxed?: boolean | undefined;
        children?: JSX.Element | JSX.Element[] | undefined;
        animatedStyle?: ((scrollY: import("react-native").Animated.Value) => import("react-native").ViewStyle) | undefined;
        renderBackground?: ((scrollY: import("react-native").Animated.Value) => JSX.Element) | undefined;
        withShadow?: boolean | undefined;
        blur?: boolean | undefined;
        backgroundColor?: string | undefined;
        withSafeArea?: boolean | undefined;
        style?: import("react-native").ViewStyle | undefined;
    }>;
    Element: import("react").NamedExoticComponent<{
        animatedStyle?: ((scrollY: import("react-native").Animated.Value) => false | import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle> | import("react-native").Animated.WithAnimatedArray<false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | null | undefined> | readonly (false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | null | undefined)[] | null | undefined> | null | undefined) | undefined;
        children: JSX.Element | JSX.Element[];
        unboxed?: boolean | undefined;
        interpolate?: {
            [key: string]: number[] | string[];
        } | undefined;
        style?: import("react-native").ViewStyle | undefined;
    }>;
    Wrapper: import("react").NamedExoticComponent<{
        headerMaxHeight?: number | undefined;
        headerMinHeight?: number | undefined;
        avoidSafeArea?: boolean | undefined;
        disableParallaxEffect?: boolean | undefined;
        onScroll?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        children: [import("react").ReactElement<{
            boxed?: boolean | undefined;
            children?: JSX.Element | JSX.Element[] | undefined;
            animatedStyle?: ((scrollY: import("react-native").Animated.Value) => import("react-native").ViewStyle) | undefined;
            renderBackground?: ((scrollY: import("react-native").Animated.Value) => JSX.Element) | undefined;
            withShadow?: boolean | undefined;
            blur?: boolean | undefined;
            backgroundColor?: string | undefined;
            withSafeArea?: boolean | undefined;
            style?: import("react-native").ViewStyle | undefined;
        }, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>, JSX.Element];
    }>;
    FlatList: import("react").NamedExoticComponent<import("react-native").Animated.AnimatedProps<import("react-native").FlatListProps<any>> & {
        animatedStyle?: ((scrollY: import("react-native").Animated.Value) => import("react-native").ViewStyle) | undefined;
        style?: import("react-native").ViewStyle | undefined;
        ListFooterComponent?: (() => JSX.Element | null) | undefined;
        contentContainerStyle?: import("react-native").ViewStyle | undefined;
        flatlistRef?: import("react").RefObject<import("react-native").FlatList<any>> | undefined;
    }>;
    ScrollView: import("react").NamedExoticComponent<import("react-native").Animated.AnimatedProps<import("react-native").ScrollViewProps> & {
        animatedStyle?: ((scrollY: import("react-native").Animated.Value) => import("react-native").ViewStyle) | undefined;
        children: JSX.Element | JSX.Element[] | null;
        style?: import("react-native").ViewStyle | undefined;
        scrollViewRef?: import("react").RefObject<import("react-native").ScrollView> | undefined;
    }>;
    SectionList: import("react").NamedExoticComponent<import("react-native").Animated.AnimatedProps<import("react-native").SectionListProps<any, import("react-native").DefaultSectionT>> & {
        animatedStyle?: ((scrollY: import("react-native").Animated.Value) => import("react-native").ViewStyle) | undefined;
        style?: import("react-native").ViewStyle | undefined;
        ListFooterComponent?: (() => JSX.Element | null) | undefined;
        sectionlistRef?: import("react").RefObject<import("react-native").SectionList<any, import("react-native").DefaultSectionT>> | undefined;
    }>;
    CollapsibleElement: import("react").NamedExoticComponent<{
        animatedStyle?: ((scrollY: import("react-native").Animated.Value) => import("react-native").ViewStyle) | undefined;
        children: JSX.Element | JSX.Element[];
        unboxed?: boolean | undefined;
        style?: import("react-native").ViewStyle | undefined;
        interpolate?: {
            [key: string]: number[] | string[];
        } | undefined;
    }>;
};
export default AnimatedScreen;
