import React, { useContext } from 'react';
import { View, Animated, SafeAreaView } from 'react-native';
import { BlurView } from '@react-native-community/blur';
import AnimatedScreenContext from '../AnimatedScreenContext';
import useStyle from './style';
const AnimatedScreenHeader = ({ children, boxed, animatedStyle, blur, withShadow, backgroundColor = 'white', renderBackground, withSafeArea = true, style, }) => {
    const { scrollY, headerMaxHeight, headerMinHeight } = useContext(AnimatedScreenContext);
    const styles = useStyle({
        boxed,
        blur,
        withShadow,
        backgroundColor,
    });
    const shadowOpacity = scrollY.interpolate({
        inputRange: [0, headerMaxHeight],
        outputRange: [0, 0.3],
        extrapolate: 'clamp',
    });
    const elevation = scrollY.interpolate({
        inputRange: [0, headerMaxHeight],
        outputRange: [0, 14],
        extrapolate: 'clamp',
    });
    return (React.createElement(Animated.View, { style: [
            styles.animatedWrapper,
            {
                height: scrollY.interpolate({
                    inputRange: [0, headerMaxHeight],
                    outputRange: [headerMaxHeight, headerMinHeight],
                    extrapolate: 'clamp',
                }),
            },
            withShadow && { elevation, shadowOpacity },
            style && style,
            animatedStyle && animatedStyle(scrollY),
        ] },
        blur ? (React.createElement(BlurView, { blurAmount: 36, blurType: "light", style: styles.headerBackground })) : (React.createElement(View, { style: styles.headerBackground })),
        renderBackground && renderBackground(scrollY),
        withSafeArea ? React.createElement(SafeAreaView, null, children) : React.createElement(React.Fragment, null, children)));
};
export default React.memo(AnimatedScreenHeader);
